----------------------------------Load Balancing---------------------------------------------------------

----------------------SCALABILITY ----------------------------------------

Ability to serve more growth increase proportionally with resources.
handle user growth, traffic and data size without effecting performance

1) Deploy to bigger instance vertical scale
hd,cpu,ram,i/o
there are limits to VS
it is expensive
increase EC2 instance size ie t2.micro to t2.small

2) Horizontal scaling
Deploying multiple instance of app/db
it also increase availability

Additional infrastructure needed

Distribute instances

1) Distribute EC2 in a single AZ in same Region
2) Distribute EC2 in a multiple AZ in same Region
3) Distribute EC2 in a multiple AZ in multiple Region

Auto Scale Group

Distribute load : ELB , Route53(for multiple regions)
ELB is managed so no need to think about its scaling

-----------------------------------------------------------------------------------
Load Balancers are the servers that forward internet traffic to multiple servers
single point of entry DNS

Elastic Load Balancer (managed service, and auto scaled (highly available)
used for LB and distribute load for EC2 
these EC2 instances can be in multiple AZ within a region
** ELB can be public (accessible over internet ) or private to aws network
distribute loads to the healthy instances using health check

Troubleshooting

4XX errors are client induced errors
5XX errors are application induced errors
LB error 503  at capacity or no registered target

Each layer makes use of layers beneath it

App Layer layer 7  (HTTP, SMTP)  make API calls

Transport Layer 4  TCP TLS (secure TCP), UDP(high performance over reliability)  ensure bits/bytes transferred properly and order

Network Layer Layer 3 (IP) transferring bits/bytes

3 Types of ELB

(1) Classic LB (Layer 4 (TCP/TLS & UDP) and layer 7 (HTTP/HTTPS) )
not recommanded by AWS, created in 2009
older version of ELB


2) Application Load Balancer (Layer 7)
new generation , advance routing ,HTTP/HTTPS, WEbSockets
created in 2016

3) Network load Balancer (Layer 4)
very high performance TCP/TLS & UDP
created in 2017

You can setup Internal (private) Or External (public ) LB

---------- 1) CLASSIC LOAD BALANCER---------------------

limitation
** 1 CLB per application

AWS Services -> EC2 - Load Balancer-> create load balancer
Type: Classic Load Balancer (Previous Generation)
*** Choose a Classic Load Balancer when you have an existing application running in the EC2-Classic network.
Name: My-Classic-LB
Security Group : My-LB-Security-Group

Health Check
Ping Path: /
Response Timeout: 5 sec
Interval: 20 sec  (talk to instance after 20 sec )
Unhealthy Threshold: 22
healthy Threshold: 220	

Add EC2 instances:
select your EC2 instance

Enable Connection Draining : 300 sec

** To stop accessing EC2 directly without LB
Open SG of EC2 and 
Source : My-LB-Security-Group

EC2 Instance 1
http://ec2-3-6-94-201.ap-south-1.compute.amazonaws.com
EC2 Instance with (root ) on host (ip-172-31-35-58.ap-south-1.compute.internal) with ip (172.31.35.58)

EC2 Instance 2
http://ec2-13-234-204-76.ap-south-1.compute.amazonaws.com
EC2 Instance with (root ) on host (ip-172-31-34-29.ap-south-1.compute.internal) with ip (172.31.34.29)

Load balancer  DNS
http://My-Classic-LB-1642051479.ap-south-1.elb.amazonaws.com

Now Delete the Load Balancer using Action

---------- 2) APPLICATION LOAD BALNCER  LAYER 7-----------------
** most frequent used
** supports web sockets HTTP/HTTPS
supports all supporting load balancer features
** scale automatically
** it is a managed service
but we are responsible of scaling EC2 instances
** it can also LB with container applications/ web app on same machine
also can LB using Lambdas 
Load balancing to multiple Http applications across machines (target groups)

**  Routing tables to diff target groups
based on URL example.com/users to TG1 and  example.com/accounts t TG2
based on Host one.example.com/ to TG1 and  two.example.com t TG2
based on QueryString and Headers
It has port mapping feature to redirect to a dynamic port in ECS
it is great for Microservice and container based applications

EC2 -> Load Balancer -> Application Load Balancer (Type)

Name: My-Application-LB
Internet-facing
ip address type: 	ipv4

select all availability zones

** Cross Zone LB is enabled default

Security Group (to control traffic using rules) : My-ALB-Security-Group

Configure Routing
Your load balancer routes requests to the targets in this target group using the protocol and port that you specify, and performs health checks on the targets using these health check settings. 

***Note that each target group can be associated with only one load balancer


--------------------User data for Microservice-----------------------------------------------------------------------------------------------

** One ALB can support multiple Microservice
*** Create a separate target group for each Microservice
*** Classic LB doesn't support multiple target groups

Listener Rules
configure multiple listener rules for the same listener
rules are executed in the order they are configured
default rule executed at the end


Create a new EC2 instance from Template
Select instance with Tag  InstanceForMicroserviceA
add userdata as below

#!/bin/bash
yum update -y
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "EC2 Instance  for MicroService A with ($(whoami) ) on host ($(hostname)) with ip ($(hostname -i))" > /var/www/html/index.html
mkdir /var/www/html/a
echo "Microservice A Called with ip ($(hostname -i))" > /var/www/html/a/test.html

create a new Target Group 
TargetGroup-MicroserviceA
Register new EC2 instance with that Target Group
Go to My-Application-LB - > Select existing HTTP Listener --> view/edit rules
Add Rule
if Path /a/*  THEN forward it to TargetGroup-MicroserviceA

http://my-application-lb-284230688.ap-south-1.elb.amazonaws.com/a/test.html
Microservice A Called with ip (172.31.10.46)

Lister Rules possibilities
1) based  on path = test.com/a to target group A`
2) based  on Host = a.abc.com  to target group A`
3) HTTP header and methods (GET/POST)
4) Query String   (/microservice?name=A)  o target group A , (/microservice?name=B)  o target group B
5) Based on IP all request from a range of IP to a TG A, other to TG B

Each Lister have (protocol + port)

Deleting LB and Target groups

1) Delete ALB
2) ASG Delete (will automatically delete the instances)
3) Delete Target Groups


-------3)--NETWORK LOAD BALANCER---------LAYER 4 UDP-----------------
TCP/TLS & UDP

*** A static / Elastic IP can be assigned with NLB
can load balance EC2, ECS (container- appl, web apps using IP address)
*No support for Lambdas
handles millions of request per seconds
Less latency 100ms  (400 ms for ALB)

* It has one static IP per AZ  and supports assigning Elastic IP
Not included in Free Tier

Name: My-Network-LB
Protocol Listener : TCP port: 80

Configure routing
TargetGroup : TargetGroupForNLB
Register Targets: Add instances

DNS
http://My-Network-LB-69ad0058bb90cba2.elb.ap-south-1.amazonaws.com

** There is no security groups at the NLB

Attributes that can be changed 
Delete Protection

*** Cross Zone load balancing
If enabled , each load balancer instance in a AZ will distribute load evenly to all registered instances in all AZs
CLB (Disabled by Default and No charges  for inter AZ data)
ALB (Enabled by Default  and can';t disabled it and No charges  for  inter AZ data)
NLB (Disabled by Default and Pay for changers inter AZ data)

Access log eg. sent to S3


1)  Delete NLB : My-Network-LB
2)  Delete TargetGroup : TargetGroupForNLB
3)  Terminates all instances

* Both ALB and NLB supports sticky sessions


--------TARGET GROUP------------------------------------------------------------------------------------------------------------

Target Group (used to group EC2 instances / lambdas/ or set of IP ) for LB to distribute load)
name: My-EC2-Target-Group1
type: instances

De-registration delay
*** How long should ELB wait before de-registering a target.
This setting ensure that the load balancer gives in-flight requests a chance to complete execution
default is 300 seconds up to an hour , also called Connection draining
eg .it will not entertain new request but wait for 300 sec and then de register the ec2 instance

slow start duration
when a target is ready 
eg. 10 sec after 10 sec it will send request to newly instance

Algorithm
Round robin 1 by 1
Least outstanding request 

Stickiness
enable  (for session mgmt, send all request by a same user to the same instance
implemented using cookie (stickiness enable unless cookie expired)
supported by ALB and CLB
use case: make sure user doesn't lose his session data
-------------------------------

Security Group : My-LB-Security-Group

Register Targets
Register targets with your target group. 
If you register a target in an enabled Availability Zone, the load balancer starts routing requests to the targets as soon as the registration process completes and the target passes the initial health checks.

select all instances - Create
DNS Name
http://My-Application-LB-284230688.ap-south-1.elb.amazonaws.com


To restrict traffic of EC2 instances directly instead of Load Balancer

Select EC2 instance 
Edit Security Group
Inbound Rule
Add Load Balancer Security group

Add a new Listener
port 8080
response 200
fixed response

Security Group of LB
add inbound
8080

http://My-Application-LB-284230688.ap-south-1.elb.amazonaws.com:8080



---------------------------AUTO SCALING GROUPS`------------------------------------------------------------

scale out : increase instances
scale in:    decrease instances

ASG maintained a configured no. of instances
scale in and scale out automatically to adjust load
ASG can launch on-demand,spot or both
** Best practice: use Launch template with ASG
** ALB can adjust and distribute load to healthy instance

ASG attributes
1) launch Configuration
	AMI + instance Type
	EC2 user data
	EBS Volume
	SG
	SSH key pair
2) Min/Max/Initial Capacity
3) Network + Subnet info
4) Load Balancer info
5) Scaling Policies

*** ASG based on CloudWatch Alarms which monitors a  matrix(CPU utilisation)
also can trigger Scaling Policies (based on CPU,network, custom metrics or based on schedule)
***ASG use launch Configurations or Launch Templates (newer)
** IAM role attached to ASG will get assigned to EC2 instances
** ASG is free, you pay for underlying resources
**ASG can terminate instances marked as unhealthy by an LB
to update ASG, must provide a  new launch template

EC2- > AutoScaling Group
Create ASG
Auto Scaling group name: MyEC2AutoScalingGroup
Launch Template (EC2 instance size,AMI) - create new launch template -> My-ASG-Launch-Template
Source Template: MyEC2Template with latest version
Add all Subnets
Enable load balancing = YES
Create New Target Group = ASG-TargetGroup (with  no. EC2 instances registered)

*** Configure group size and scaling policies
Desired Capacity   = 2  (optional , if not the DC= Min)  how many we want , Desired capacity or size is the ideal number of instances in that auto scaling group
Min Capacity 		 = 1
Max Capacity 		 = 3

Auto Scaling Policies

1) TargetTrackingPolicy
Most simple and easy to setup
Policy type:
Target tracking scaling
Execute policy when:
As required to maintain Average CPU utilization at 70
70

AGG--> Activity

basic monitoring for ASG is 300 secs from console and is free
detailed monitoring for ASG is 60 secs from console and is not free

Stand By
Can put EC2 instance manually to stand by (still part of ASG and changed but no traffic will come to it, use for software upgrade)
**ASG doesn't perform Health Check on instances on stand by state

* Cool down period helps to ensure that your ASG doesn't launch or terminate additional instances before the previous scaling activity takes effect
A scaling specific cool down period overrides the default cool down period

It is always recommended to create a scale-in event for every scale out event
** launch Configuration once created can't be edited 

https://www.youtube.com/watch?v=c-AwFkicRY8

*** Even  if policy indicates, ASG ensure the desired capacity 
**ASG uses Alarms and Policies to determine scaling

MANUAL SCALIG 
1) maintained current instance levels at ll times
min=max=desired == CONSTANT
when always there is constant load expected

2) Scale Manual
change desired capacity as needed
you need complete control over scaling 

3) Scale based on schedule / predictive scaling/cyclic 
programs with regular schedules
Create Schedule Action

4) Dynamic/Automatic Scaling 
On demand Scale
Unpredictable load

TYPES OF DYNAMIC SCALING

1) Target Tracking
I need to keep/maintain CPU utilisation at 70%
Modify current capacity based on the target value for a specific metric
Example of AC  
I need temp to be maintained at 20%

cool down  period
ignore alarms within this time duration and will not create a new ec2 instance

warm up period
wait for EC2 instance to start for this time


2) Simple Scaling
more complex policy
+5 if CPU utilisation > 80%
-3 if CPU utilisation < 60%
 
 ** waits for cool down period before triggering additional actions

3) Step Scaling (adding steps)
+1 if CPU utilisation between 70% and 80%
+3 if CPU utilisation between 80% and 100% 
- 1 if CPU utilisation between 40% and 50% 
Warm up time can be configured for each instance.
** Here cool down period will not work in Step Scaling Policy

Cloud watch
monitor metrics 

CW Alarm -> Auto Scaling -> EC2 instances

CW Alarm (if CPU > 80%)
Scaling Action (+5 EC2 instances)

CloudWatch --> Alarms


***  ASG Launch Configuration is legacy
**   ASG  Launch template is latest versioned
provisioned for both on-demand and spot instances
can use T2 unlimited burst feature

* Because the ASG has been configured to leverage the ALB health checks, unhealthy instances will be terminated
* The metric "requests per minute" is not an AWS metric, hence it needs to be a custom metric
* Network Load Balancers expose a public static IP, whereas an Application or Classic Load Balancer exposes a static DNS (URL)
* SNI (Server Name Indication) is a feature allowing you to expose multiple SSL certs if the client supports it.
* The Default Termination Policy for ASG. It tries to balance across AZ first, and then delete based on the age of the launch configuration. 

---------------- AUTO SCALING SCENARIOS----------------------------

1) change instance type or size of ASG instances
OR 
roll out a new security patch (new AMI) to all ASG instances.
Sol:
*** launch configuration or launch template cannot be edited
create a new version and ASG use that  version
Terminate instances in small groups to make sure application is available

2)  Perform actions before instance added/remove
Create a lifecycle hook , 
configure cloudwatch to trigger actions based on it

Auto scaling Group --> Instance Management --> Life-cycle hooks
create life-cycle hook
MyLiifeCycle

3) which instance is terminated first when scale in
based on termination policy
default is distribute instances across AZ then based on old instance

EC2 -> Auto Scaling groups -> MyEC2AutoScalingGroupASG 
Advance configurations
Termination policies

4) Prevent frequent scale up/down
**Adjust cool down period to a high value (default 300 sec)

5) I want to protect newly launched instance from scale-in 
Enable instance scaling protection
if enabled then all new instances from this ASG will not be scale in

*** To scale a resource other than EC2, you can use the Application Auto Scaling API, which allows you to define scaling policies to automatically scale your AWS resources or schedule one-time or recurring scaling actions.
AWS Auto Scaling is enabled by Amazon CloudWatch, so service fees apply for CloudWatch and your application resources (such as Amazon EC2 instances, Elastic Load Balancing load balancers, etc.).

*** ASG Termination Policy
1) Find AZ which has most no. of instances
2) If there are multiple instances in a AZ, delete the one with oldest configurations


------------------------------------Availability-------------------------------------------------------------

Are applications are available when users need them
Percentage of time
99.99% is four 9s availability

99.95% 	22 mins down time in a month
99.99%   	4.5 mins
99.9995 	26 seconds 

To achieve Availability

1) use LB
2) deploy EC2 instances to multiple AZ's
3) use cross Zone LB
4) Deploy to multiple region
5) configure EC2 and ELB health checks

*** ALB by default enabled Cross Zone LB
CLB and NLB it need to be enabled


----------------Elastic Load Balancer Advance------------------------------------------------------------------

-------------SSL/TLS - basis-------------------------------

SSL Certificate (in-flight encryption)
TLS Transport Layer Security , is new version of SSL
SSL certificates are issued by CA ie Symantec,Comodo

for Https we need to install ssl or tls certificates on the server
in AWS SSL certificates can be managed using AWS Certificate Manager
** ELB requires X.509 certificates (ssl/tsl)

Application/Classic LB SSL TLS Termination
Client -> ELB 		HTTPS
ELB -> EC2          HTTP

Network LB TLS Termination
Client -> NLB  TLS
NLB -> EC2    TCP

-------------Server Name Indication----------------------------------
** Allows multiple SSL certificates onto one web server to sever multiple websites
newer protocol and require client to indicate the hostname of the target server in the initial SSL handshake

Client 
ALB (SSL1, SSL2) based on request will get the appropriate certificate 
ie for each rule we can have different certificate

only works for ALB and NLB

Each listener in ALB can be associated with multiple SSL certificates (one for each website)
and SNI ServerName Indication is automatically enabled
its extension to TLS

--Monitoring ELB logs and Headers -------------------------------

ELB --> Action
Edit LB attributes
Access logs 

NLB allows EC2 instances to see client details like IP but not ALB in request header

X-Forwarded-For      Client IP
X-Forwarded-Proto   Originating protocol
X-Forwarded-Port     Originating port

**** IMP ALB VS NLB VS CLB read again

----------ELB Connection Draining --------------------
*** It is the time to complete "In-Flight Requests " while the instance is de-registering or unhealthy

For CLB it is Connection Draining
For ALB and NLB , Its De-registration Delay at Target Group


-------------IMP LB SCENARIOS --------------------------------------------------------------------------------------

1)maintain sticky session
enable stickiness on ELB (cookie name normally: AWSELB)

2)distribute load only yo healthy instances
configure health

3) configure load among 2 AZ in the same region
Enable cross zone load balancing

4) in-flight request to unhealthy instances to given opportunity to complete
*** Enable connection draining 

5) warm up time to EC2 instances before getting load
configure health check grace period

6) protect EBL from web attacks, sql injection, cross-site-scripting
* integrate ELB with WAF web application Firewall

7) Protect web app from DDoS attacks 
* by default ELB provide it

-----------Architectural Considerations ----------------------------------------

Security
use security groups to restrict traffic
EC2 instances in private VPC (not accessible out side AWS network)
user dedicated hosts when u have regulatory needs

Performance
right instance family
appropriate placement groups
prefer custom AMI to install software using user data 
choose right ELB for you use case

Cost
optimal no. and type of EC2 instance family
use right mix of 
saving , reserved , on demand , spot instances

* Resiliency (how quickly u recover)
health checks
cloudwatch for monitoring
DR , ami copied to multiple regions

warm attach = attaching ENI with EC2 instance is stopped

* spot is the cheapest
* on demand is the costly

------------------------------------------------------------------------------------------------
Monitoring EC2 instances
using 
CloudWatch
basic monitoring every 5 mins Free
CPU,Disk,Network are tracked by cloudwatch

** CW doesn't have access to OS system metric like memory consumption
1) install cloudwatch agent on ec2
2) use cloudwatch collected plug-in



