---------------------------ServerLess-----------------------------------------
You don't worry about  infrastructure
flexible scaling and automated high availability
Pay for use 
No of requests
duration of requests
memory consume

Lambda called/trigger from 
Amazon API Gateway
AWS Cognito
DynamoDB (event)  chnage in DB
CloudFront (lambda@Edge)
AWS Step Functions
Kinesis (event)
S3 Simple Storage Service , new object
SQS (event) new msg in Queue
SNS Simple notification service and so on


name: MyNodeJsLambda1
runtime : Nodejs
create Event: FirstEvent
Test

create environment variable 
EnvironmentName = Development

add beow code in index.js
exports.handler = async (event) => {
// TODO implement
const response = {
statusCode: 200,
body: JSON.stringify('Hello Ali from ' + process.env.EnvironmentName),
};
return response;
};


AWS X-Ray (tracing)
to trace request
request granted for role
Enable it 

Matrix using AWS cloudwatch (monitoring and log)


basic setting
MEMORY = the more memory the more CPU
Price proportional to Memory 

TimeOut  of lambda function  = 3 seconds is default 
max timeout = 15 mins

stateless - store data to S3 or DynamoDB
500 MB of non persistent distk /tmp
Allocate memory in 64MB increments from 128MB to 3 GB


-----------------------------API Gateway-----------------------------------------------------

Rest API Challenges

Management of Rest API is not easy
authentication and authorization
Rate limits (quotas)
Can  Run Multiple Versions of API and multiple environments
Monitor API callsCache API requests
API keys for third party developers  to monitor usage

Warning: don't use API keys for authorisation

Full Managed Service
Life cycle management for REST APIs
Enable Caching for API call with TTL
protect backend by throttling reqest

publish , maintain , monitoring and securing APIs
Integrate with Lambda, EC2, ECS,  or any publicly addressable web servic
Integrate with  CloudWatch, CloudTrails
supports HTTP(s) and web sockets
It is serverless 

HTTP API is new version of REST API


REST API -->  New API
Name: MyHelloWolrdAPI
EndPoint Type: Regional

Regions = 20 
Edge Locations = where regions are not available CloudFront distribute content 200+

Create API

Action-> Create Method -> Get

Integration Type:
Lambda Function: MyNodeJsLambda1
Save
Test

Authorizers
Name:
Type  Congnito and Lambda authorizer (JWT token or SAML)

API keys
To identifying API clients  based on key used for usagePlan

Throttling
wBrust: 800

Quota: 
total no of request in a month

Client Certificates:
to ensure HTTP requests to your back-end services are originating from API Gate
to verify requester's authenticity


Action -> Deploy API 
Deployment Stage:  New Stage
Stage Name:Dev

URL: 	https://ruvdffuyq5.execute-api.ap-south-1.amazonaws.com/Dev

Canary Deployment
sent a % request to a no. of users

Amazon API Gateway 

Authentication

AWS Signature version 4
create a signature using AWS secret access key and send it with API request
if ur users belong to same AWS Account


Lambda Authorizer
Implement a lambda function to authenticate (JWT,OAtuh) and return AMI policies
Integrate with any custom user directory

Amazon Congnito
authenticate mobile and web-apps
want to integrate with web identity providers google, Facebook
MFA ,phone and email versification
support for SAML

Congnito - User pools
create your own secure user directory
create sign -u pages
customisable web UI to sign in with socila sing in option
create a user pool

Congnito - Identity pools
for authorizaion to aws services
connect identity pools with authentication identity providers
own user pool , faacebook,openId, SAML
Federated Identity
an external identity provider

How Congnito works
1) app send users credentials to identity provider (user pool or  facebook)
if ok, it gets a token
2) app send token to identity pool
3) identiy ool validates it via STS and creates temp access keys,secrect key and session token
4) app send a request with these credentials to AWS service


lambda@Edge
running labda functions at end location
lowest network latency for end users

use case: search engine optimisation, W/B testing , dynamic routing
Cab be trigger on AWS cloudFront Events
Viewer request- trigger when request arrive at edge location
Origin request- just before sending request to origin when  obj is not in cache
Origin response-After edge loc receive response back from origin
Viewer Response: just before response is end  back from edge loca
l
Limitations
only supports node.js and python
No free tier and more expensive than lambda

ServerLess Application Model(SAM)
how to test serverless projects with lambda,api gateway and dynaDB in local
its a open source
yaml file with all serverless resourcees, cloud formation template

AWS AppSync
apps cotinue to work offline
data sysnc when connect again
based on GraphQL (FB framework ) get data from multiple api
can integrate with nosQL db, rds and lambda


AWS Step Functions
build distributed applications using vistual workflows

Crate a serverless wotkflow in 10 mins using visual apporch
invoke multiple aws services  into serverless workflows
build workflows as a series of steps
retry a step until it successed
max duration is 1 year
integrate with API Gateway to expose it as API
include human approvals 
long-running
machine leanding models

short duration
iot data ingestion, steam processing
less code
recommend for all new workflows , easy and simple cases

AWS SIMPLE WORKFLOW SERVICE (SWF)
for complex orchestration 
buid and run background jobs
with paralle or sequential steps
synchronously or asynchronously
can invlode human inputs
use case: order processing
workflow can run upto 1 year

Workflow Starter call SWF action to start workflow
eg. order is received
SWF receives request and schedule a Decider

Decider  what is next task to do and return decision to SWF
eg schedule a activity

SWF schedule Activity1
one of those Activity worker pick up Activity1 and send results  to SWF
SWF update workflow history and then schedule another decision task
until decider to close workflows
SWF archivers history and close workflow

