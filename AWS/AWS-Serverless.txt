---------------------------ServerLess-----------------------------------------
A new paradigm in which the developers don't have to manage/provision servers anymore

You don't worry about  infrastructure
flexible scaling and automated high availability
Pay for use 
No of requests
duration of requests
memory consume


Lambda is virtual functions
limited by time , short executions
run on  demand
scaling is automated
pay per request and compute time
integrate with whole  suite of services
easy to get more resource per functions (up to 3GB of RAM)


Language support
Node.js
python
Java 8
C#
Golang
C# powershell
Ruby
Custom Runtime API (rust)

**  Docker is not for AWS lambda, its for ECS / Fargate

Lambda called/trigger from 

AWS Cognito (ie when user log in to ur db)
Amazon API Gateway
DynamoDB (event)  change in DB
CloudFront (lambda@Edge)
AWS Step Functions
Kinesis (event) 
S3 Simple Storage Service , new object
SQS (event) new msg in Queue
SNS Simple notification service and so on
CloudWatch Events event bridge
CloudWatch Logs

Examples:

1) serverless thumbnail creation
image inserted in S3
Lambda function creates a thumbnail
Push thumbnail to another S3 or meta data to DynamoDB

2) Serverless CRON Job
CloudWatch events -> \trigger Every one hour --> Lambda Function to perform a task

AWS lambda Pricing 

1) pay per call
first 1 million (1000,000 )requests are free
.20 per 1 million requests thereafter

2) pay per duration
400,000 GB seconds of compute per month if Free


Practical -----

Create Function
use a blueprint (sample code)
hello word python
name: hello-world
create a IAM role (must) to perform integration with other services
Effect= Allow 
CreatelogStream
PutLog Event
ie cloudwatch log

Handler 
lambda_function.lambda_Handler
where 
lambda_function = lambda_function.py
lambda_Handler = name of method


name: MyNodeJsLambda1
runtime : Nodejs
create Event: FirstEvent
Test

create environment variable 
EnvironmentName = Development

add beow code in index.js
exports.handler = async (event) => {
// TODO implement
const response = {
statusCode: 200,
body: JSON.stringify('Hello Ali from ' + process.env.EnvironmentName),
};
return response;
};


AWS X-Ray (tracing)
to trace request
request granted for role
Enable it 

Matrix using AWS cloudwatch (monitoring and log)


basic setting
MEMORY = the more memory the more CPU
Price proportional to Memory 

TimeOut  of lambda function  = 3 seconds is default 
** max timeout = 15 mins 

stateless - store data to S3 or DynamoDB
500 MB of non persistent disk /tmp
Allocate memory in 64MB increments from 128MB to 3 GB

**** Lambda Limits per Region

**Execution limits

1) memory allocation : 128 MB - 3008 MB (64 MB increment)
2) Max execution time : 900 secs or 15 mins
3) environment variables: 4KB
4) disk capacity : 512 MB in /tmp
5) concurrency executions : 1000 (can be increase)

** Deportment Limits
1) deployment size : 50 MB compressed
2) un compressed: 250 MB
3) can use /tmp to load other files at startup

-----------------------------API Gateway-----------------------------------------------------

Rest API Challenges Management of Rest API is not easy
authentication and authorization
Rate limits (quotas)
support for web sockets protocol
handle different environments
create API keys, handle request throttling (too many unwanted request)
Swagger/open API to define APIs
transformation and validation  of request/response
Cache API responses
Can  Run Multiple Versions of API and multiple environments
Monitor API callsCache API requests
API keys for third party developers  to monitor usage

lambda + API Gateway = No infra to manage

Warning: don't use API keys for authorisation

Full Managed Service
Serverless offering by AWS
Life cycle management for REST APIs
Enable Caching for API call with TTL
protect backed by throttling request
publish , maintain , monitoring and securing APIs

Integrate with Lambda, EC2, ECS,  or any publicly addressable web service
easy way to expose Rest API backed by lambda function 

Integrate with  CloudWatch, CloudTrails
supports HTTP(s) and web sockets
expose http endpoints , internal http on premise Http API

It is serverless 
Expose any AWS API through API Gateway
ie start AWS step function workflow, post msg to SQS

API Gateway: Endpoint Types
3 ways to deploy API Gateway

1) Edge-Optimized (default) 
For global clients
requests are routed through CloudFront edge locations 
Improves Latency
API gateway still lives in only one region

2) Regional
for clients within the same region
more control over caching

3) Private
can only be accessed from your VPC using VPC endpoint ENI
use response policy for access


-----------Practical ---------------------------
Console -> API Gateway

REST API
build
protocol: REST
name: myFirstAPI

Action - create method -GET

Integration type: Lambda Function
Lambda Function = lambdaapi-gateway-fn
use lambda proxy integration
save

policy of lambda function is updated which allow API gateway to access to this function

Action -> Deploy API
Deployment Stage:  Dev
Invoke URL will come

-----------Practical -----------------------------------------------------------------

HTTP API is new version of REST API
REST API -->  New API
Name: MyHelloWolrdAPI
EndPoint Type: Regional

Regions = 20 
Edge Locations = where regions are not available CloudFront distribute content 200+

Create API
Action-> Create Method -> Get

Integration Type:
Lambda Function: MyNodeJsLambda1
Save
Test

Authorizers
Name:
Type  Cognito and Lambda authorizer (JWT token or SAML)

API keys
To identifying API clients  based on key used for usagePlan

Throttling
wBrust: 800

Quota: 
total no of request in a month

Client Certificates:
to ensure HTTP requests to your back-end services are originating from API Gate
to verify requester's authenticity


Action -> Deploy API 
Deployment Stage:  New Stage
Stage Name:Dev

URL: 	https://ruvdffuyq5.execute-API.ap-south-1.amazonaws.com/Dev

Canary Deployment
sent a % request to a no. of users

------------------------------------------------------------------------------------
*** API Gateway - Security 

1) IAM Permissions (sig v4)

create an IAM policy  and attach it to User/Role
* Handle Authentication + Authorization
** great of users/roles already in AWS account
** User call API and provides  IAM credentials in header with "sig v4" capability to API gateway
which call IAM policy to check
create a signature using AWS secret access key and send it with API request
if ur users belong to same AWS Account

2) Lambda Authorizer / Custom Authorizer
Implement a lambda function to authenticate (JWT,OAtuh) and return AMI policies
** great for 3rd party token
** helps to use OATh/SAML/3rd party type of authentication
* Handle Authentication + Authorization
Integrate with any custom user directory
uses QWS lambda to validate the token in header being passed
pay per lambda invocation

User call API wit token --> API gateway -> pass it to Lambda Authorizer -> Evaluate token and return IAM policy


---------------------------------3) Amazon Cognito------------------------------------------------------------

Fully manages user lifecycle
we want to give our users an identity to that they can interact with our application
authenticate mobile and web-apps
want to integrate with web identity providers google, Facebook
MFA ,phone and email versification
support for SAML


a) Cognito - USER POOLS  (CUP)
* manage your own user pool (can be backed by Facebook, google etc)
* Creates a serverless database of user for your mobile app
simple login: username or email / password
sends back a JSON web token JWT
create your own secure user directory
only for authentication and not for authorization
create sign -u pages
*** customisable web UI to sign in with social sign in option
Integrate with API Gateway
create a user pool

Client register to CUP which send a JWT
Client connect to Cognito user pools which authenticate and retrieve token
which application pass it to the API gateway and API gateway communicate with Cognito user pool
** Can  enabled Federated identity in user pool

b) Cognito - IDENTITY POOLS (FEDERATED IDENTITY)
* Goal is to provide direct access to AWS services from client side

Federated Identity (FI) is an external identity provider

App Connect to Identity provider FB or google) which gives token to the app
Token is passed to our  Federated Identity Pool which connect to Identity provider to validate
FI pool connect to STS service to get temp credentials for AWS
it pass back to app
app use this temp credit directly to S3 bucket

connect identity pools with authentication identity providers
own user pool , Facebook,openId, SAML

example:
Provide temporary access to write to S3 buckets using FB login

How Cognito works
1) app send users credentials to identity provider (user pool or  Facebook)
if ok, it gets a token
2) app send token to identity pool
3) identity pool validates it via STS and creates temp access keys,secret key and session token
4) app send a request with these credentials to AWS service


Cognito Sync
synchronize data from device to Cognito
May be deprectead and replaced with AppSync
--------------------------------------Lambda@Edge---------------------------------------------------------

running lambda functions at end location
to run a global AWS Lambda alongside
how to implement request filtering before reaching your application
lowest network latency for end users
deploy  lambda functions alongside your CloudFtont CDN
pay only what you use

use case: search engine optimisation SEO, A/B testing , intelligent  routing
Dynamic web application at Edge
Bot mitigation at edge
Real time Image transformation
User authentication/authorization, Prioritization
User tracking and analytics
Can be trigger on AWS cloudFront Events

* Viewer request- trigger when request arrive at edge location
* Origin request- just before sending request to origin when  obj is not in cache
* Origin response-After edge loc receive response back from origin
* Viewer Response: just before response is end  back from edge to user

* you can also generate responses to viewer without ever sending the request to the origin

Limitations
only supports node.js and python
No free tier and more expensive than lambda

** ServerLess Application Model(SAM)
SAM is a framework for developing and deploying serverless applications
All configurations in YAML code
** how to test serverless projects with lambda,API gateway and dynaDB in local
its a open source
yaml file with all serverless resources, cloud formation template
SAM can use CodeDeploy to deploy lambda functions

AWS AppSync
apps continue to work offline
data sysnc when connect again
based on GraphQL (FB framework ) get data from multiple API
can integrate with nosQL db, rds and lambda

-----------------------------------------AWS Step Functions-------------------------------------------------------

build distributed applications using visual workflows

Crate a serverless workflow in 10 mins using visual approach
invoke multiple aws services  into serverless workflows
build workflows as a series of steps
retry a step until it succeeded
max duration is 1 year
integrate with API Gateway to expose it as API
include human approvals 
long-running
machine leaning models

short duration
iot data ingestion, steam processing
less code
recommend for all new workflows , easy and simple cases

AWS SIMPLE WORKFLOW SERVICE (SWF)
for complex orchestration 
bud and run background jobs
with parallel or sequential steps
synchronously or asynchronously
can involved human inputs
use case: order processing
workflow can run up to 1 year

Workflow Starter call SWF action to start workflow
eg. order is received
SWF receives request and schedule a Decider

Decider  what is next task to do and return decision to SWF
eg schedule a activity

SWF schedule Activity1
one of those Activity worker pick up Activity1 and send results  to SWF
SWF update workflow history and then schedule another decision task
until decider to close workflows
SWF archivers history and close workflow


-----------------------------------------------------------------------------------
** Mobile Application Scenario

1) Rest API
Mobile Client (Https) -> API Gateway (invoke ) -> AWS Lambda  (query)-> DynamoDB
Mobile Client (Authenticate) -> AWS Cognito (verify auth) -> API Gateway

2) Access S3
Mobile Client (Authenticate) -> AWS Cognito (generate temp credentials) -> AWS STS security token service
Mobile Client (store/retrieve files) -> S3

3) High read throughput , static data
ie many RCU

Mobile Client (Https) -> API Gateway (invoke ) -> AWS Lambda  (query)->  DAX Caching Layer -->  DynamoDB
For static 
Can cache data at API gateway level

4) myblog.com , scale globally severing static content

static website in S3 which is regional

Client (interact with edge loc) --> AWS CloudFront -> S3
to communicate securely with S3

Client (interact with edge loc) --> AWS CloudFront (OAI) -> S3(bucket policy)
to send welcome email

DynamoDB (stream changes) -> DynamoDB Stream(invoke Lambda) -> Lambda (SDK to send email) -> SES Simple email service

5) thumb flow generation
Client (interact with edge loc) --> AWS CloudFront (OAI) -> S3(triggers) -> lambda(generate thumbnail ) -> S3

-------------------------------***-----Microservice------------------------------------------
 Synchronous Patterns
 API Gateway, Load Balancer

Asynchronous Patterns
SQS,SNS,Kinesis,Lambda Triggers (S3)

Distributed paid content
want to send links of our videos to premium user ie who paid amount
application should be global and want full serverless

Client (get Premium URL) -> API Gateway (invoke Lambda) -> Lambda (verify preimum user)-> DynamoDb 
Lambda  (generate url)> AWS CloudFront (using OAI) - S3

** S3 signed URL are not efficient for global access

Software Updates Offloading
caching at the edge
use cloudFront
CloudFront is easy way to make an existing application more scalable and chepre

Client --> CloudFront --> ALB --> ASG (EC2) --> Elastic File System (software updates)

** Big Data Ingestion Pipeline
should be fully serverless


IOT Devices -> AWS IoT Core -> Kinesis Data Stream -> Kinesis Firehose -> S3 ingestion bucket
S3 ingestion bucket -. Lambda -> Athena to Query bucket data -> S3 storage for reporting
-> Aws QuickSight (AWS business intelligence tool)

*Streams enable DynamoDB to get a changelog and use that changelog to replicate data across regions
**SQS allows you to retain messages for days and process them later, while we take down our EC2 instances
** CloudFront Signed URL have security including IP restriction





















