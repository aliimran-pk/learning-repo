Batch 8 Lahore Quarter: Q1 
-----------------------------------------
ubuntu / ubunto
to become root user
sudo su -

https://github.com/aamirpinger



Slides by Sir Daniyal Nagori:

CNC Quarter 1:-

1:Operating Sysem:
https://docs.google.com/presentation/d/1-dPr2GGGtSOLA9oIMqeK-pzWzmxZ43uJQY0MgPEWnEs/edit#slide=id.p

3:Linux:
https://docs.google.com/presentation/d/1dOy7zQrFHqNTWWEEL6MPrf9OpCyfJabKTStsQve3rRE/edit#slide=id.p

3:Docker:
https://docs.google.com/presentation/d/1BUyIUPrFekjs6IO5WvH4Gj-N3BNgD01-akbbKI-FoUE/edit#slide=id.p

4:Kubernetes:
https://docs.google.com/presentation/d/19uiRV5wXUo5K0AJjKSq0-i3QRmZTqRmYw1fwGcXsCOE/edit#slide=id.p

Slides By Sir Aamir Pinger:

CNC Quarter 1:-

1:Introduction to Cloud Native Computing:
https://docs.google.com/presentation/d/1vGAbv6M6AySKruHtJhNGC51_Euo-RQ-WvgpB5SOOYl8/edit?fbclid=IwAR1ODe-E-KTlpPgU27eEDPqm_YOslmsEMj2BOAQiRESkTrQuLtIMG-Wdkyk#slide=id.p

2:Linux:
https://docs.google.com/presentation/d/1LUjlIRKiDLZSslF5h5jdxerXALn5YWXbcxc0PU3gmfI/edit?fbclid=IwAR0dFhWPdLjsxhSkukMmcIDYR5zdVsFP-1tSWAdI1hV5MHkbRDzu-cGOipk#slide=id.g5611b9a5b4_0_456

3:Docker:
https://docs.google.com/presentation/d/1cW24PDlSk-_xTw7sPOYZZzpp5adbJgR6hg1XmPafc70/edit?fbclid=IwAR0hR9MH0qD87mtBQkafFycyTu8iQ8D6VVQlZ-gMIWmi7XeZ3ieH6FDWQCc#slide=id.g582f5daa2b_0_82

4:Kubernetes(Part)
https://docs.google.com/presentation/d/1_O-CbEDyqyfHIoq25qD4gTsMFqQbjNYCKrkgBKdiXJg/edit?fbclid=IwAR3f0qVgu95vVXd4QoAK1aKYxcXFG6Oyp8wuiT1k3wDJbyrOcO70l3nsLXs#slide=id.g4f7bd8cf17_2_48

5:Kubernetes(Part2)
https://docs.google.com/presentation/d/1h8s25MajhNDnTN9aVMGbgnvEnUMbnOvFn4v4UkHbjMg/edit?fbclid=IwAR3PO-QnUbFc3m2rjy3Nduvoowot-HlCVJSx0QHJcM4-YSqA9XjBbuOfkPE#slide=id.g4f7bd8cf17_2_48

6:Kubernetes(Part3)
https://docs.google.com/presentation/d/1iA1G-9F_3EwXDX12shdSmq4jrmJW3woD4Vb_botH97Y/edit?fbclid=IwAR3ujr4jpwKF3oXq2zDUCszFYb8WqDk9UWhB8qROCQeevEFCQvgZXYRx-PY#slide=id.g5d4be14065_2_48

Workshops for Quarter 1CNC:-

Linux Practical:
https://docs.google.com/presentation/d/18skFokWOpq0NCPCXOWDc1H0o9owsBtOuccpeSVPqYcg/edit?fbclid=IwAR2c4fmbIDBPlrl0XH6hlyHh5KKf0Qf9KhuMo32F6mwFfLzPun2tuUN40ZI#slide=id.g578133d869_0_20

Sample Files of Git:

Docker-slide-code:
https://github.com/aamirpinger/docker-slide-code?fbclid=IwAR2yBYagg72efIQ7r-UrhhrBBitu45S-Tu-MysgBiMUyPdWkL6jxdPUbFlg

Kubernetes Sample YAML files:
https://github.com/aamirpinger/k8s-slides-yaml-files?fbclid=IwAR1g8EAARYUK73cX8T-vPwm1rTnqpNo6WkLcXCZs-5RqWlz8YyG7BRdJ8yM

Introduction to Cloud Native Computing
https://docs.google.com/presentation/d/1vGAbv6M6AySKruHtJhNGC51_Euo-RQ-WvgpB5SOOYl8/edit?usp=sharing

Linux
https://docs.google.com/presentation/d/1LUjlIRKiDLZSslF5h5jdxerXALn5YWXbcxc0PU3gmfI/edit?usp=sharing

Docker Deep Dive
https://docs.google.com/presentation/d/1cW24PDlSk-_xTw7sPOYZZzpp5adbJgR6hg1XmPafc70/edit?usp=sharing

Docker slide Code
https://github.com/aamirpinger/docker-slide-code

Kubernetes (Part 1)
https://docs.google.com/presentation/d/1_O-CbEDyqyfHIoq25qD4gTsMFqQbjNYCKrkgBKdiXJg/edit?usp=sharing

Kubernetes (Part 2)
https://docs.google.com/presentation/d/1h8s25MajhNDnTN9aVMGbgnvEnUMbnOvFn4v4UkHbjMg/edit?usp=sharing

Kubernetes (Part 3)
https://docs.google.com/presentation/d/1iA1G-9F_3EwXDX12shdSmq4jrmJW3woD4Vb_botH97Y/edit?usp=sharing

Kubernetes Sample YAML files
https://github.com/aamirpinger/k8s-slides-yaml-files


---------------------------------
vmware-hgfsclient

----------------------------------
-----------------------------------------

Cloud Computing Course

Micro service architecture
better org
decouplning
better performance

Cloud Native Computing
communication network

Public 
Google
Amazon

Private
Internal servers within eg. Banks

Hybrid
Bank some data can be accessible
polices, information s 

Cloud Native

Cloud native application is an 
modern, scalable ways deployed on a cloud

DevOps

Agile
iterative and increment approach

Micro services
Exactly one functionality
well define API
developed and operate by single team

Challenges

Clod Computing Platforms

Edge Server
Content Distribution Network (CDN)
is geographically distributed network of proxy servers

Containers
Flexible 
Lightweight
Interchangeable (version change easily)
Portable (move to cloud or anywhere else)
Scalable (copies load balance)
Stackable (communicate application within docker)

Orchestrated
Scaling
Monitoring
load balancing


Linux
Multiple process to run good throughput

Resource Management
multiple users 

Process Management
multiple applicaitons/process exe cpu scheduling 

Storage Management

Kernel 
core component
used to access hardware


Kernel Space

GNUC Lib
system calls access Kernel space from user space

User Space
our applications

Linux Hireachly systems
root

create a file
touch app.txt

To edit a file
vi app.txt
press i
Hello World
press escape button
shift : wq

cat app.txt  (print content of a file)

cp app.txt /app/
mv
rm
man (used for help )
man ls

find /abc -name "app.txt"

uname
gives name of OS

uname -a
display machine info

lscpu
This command returns more information about
the system such

cat /proc/cpuinfo

df -h   (disc space in human readable) of mounted devices
du home/ display files in a directory  with size
du -s /home (total size of the directory)
date
cal (calender)
w (who is online)

apt = Advanced Packaging Tool

Libre-Offfice suite is Linux’s answer

apt-get install package-name
apt-cache search keyword (download package search )
info gives online information
type (location of a command file)
type mkdir 
bg (for background service)
free (how much memory is free)
ps (running processes)
kill
top (cpu and memory utilisation)
nice run a program in low priority
su -
shutdown

---------------------
Linux In Depth

Shared
sudo adduser ubuntu vboxsf

--------------------------------------
To disable Hyper-V and get VMWare working, in PowerShell as Admin:

bcdedit /set hypervisorlaunchtype off
To re-enable Hyper-V and break VMWare for now, in PowerShell as Admin:

bcdedit /set hypervisorlaunchtype auto

--------------------------------------------------------------------------------------
to become root user
sudo su -

apt-get install python

or 
sudo apt-get install python (sudo gain privileges of root to a normal user)

normal can't install dependencies

Ctrl + a at start of cursor
Ctrl + e at end of cursor

Ctrl + r  search in history

Files and Directories

touch abc.txt
vi abc.txt
press i   (for insert)
hello world
esc (out of insert mode)
:wq  (write and quit)

cat abc.txt

mkdir cncpractice
cd /cncpractice

----------------Script -------------

touch simple.sh
vi simple.sh
i
#!/bin/bash    (this script will run in the bash script)

echo my first name is : $1
echo my first name is : $2
:wq

./simple.sh ali imran

File Permission

0= No 
1= executable
2= write
4= read

7=1+2+4

ls -l

fileowner 
group
otheruser

- file
d directory

chmod 777 simple.sh

bash and sh are two different shells. Basically bash is sh, with more features and better syntax.
cat /etc/shells
gives u all installed shells
sudo apt-get install dos2unix


dos2unix simplescript.sh

uptime of my system
uptime
uname (os name)
uname -srv (os with release)
man command name (details of ls)
cd ~ (move to home dir of current user) ie move to /root
hostname
hostname -i (ip address)
date (current date and time)
cal (calender)
w (who is online)

cp filename dirpath (full path)
rm (delete)
mv 

search

find path -name search
find . -name "linux.txt"  or find . -name "linux*"

uname -a  (cpu info)
uname -p (processor)
lscpu
cat /proc/cpuinfo
df (disk space)
df -h (human readble for)
du (size of a directory)
du -s (total size)

Install Software Package Manager
In ubuntu there is a software package

Install a package cpuid
sudo ap-get cpuid
cpuid (will gives you )

uninstall a Package
sudo apt-get remove packagename
sudo apt-cache search packagename (details about packages)

create custom commands
alias myFile ="touch myfile.txt" 
myFile
ls (will get the myfile.txt) 

unalias myFile (will remove this custom command)

User Management

sudo useradd user1 -m (a user will be created in /home/user1)
sudo passwd user1
sudo userdel user1 -r


info (provides online info about a command )
info ls    info is rich command
whatis  (shot desc)

type commandName  (location of a commnad)
type touch   not for ls as it is an alias


whereis commandName (location and executable file name)
which commandName (path of command share in PATH variable)
bg (background process)
free -h (check free memory)
ps 
kill processId
top  (list of process with memory)
reboot
shutdown

--------------------------------------------------------------------------------------------------

LTS = long term support
iso file having complete ubutu image is burn

Rufus.ie

ap-get install curl
from ubuntu reposiotruy

su root   (means switch user)#
sudo passwd root


Install Ubuntu 
https://youtu.be/MxhMghTsnjs?fbclid=IwAR3gVb0C03LY6vXX-h-1V16t9GqzUkrN6VEuLV5Yvf9AbBs7rN57jWXbEm8

katakoda
for kubernative practice
https://www.youtube.com/redirect?redir_token=HN3NVg1CaL1xAcq4YgD9TquZpF58MTU4NzA2MDYwN0AxNTg2OTc0MjA3&event=live_chat&q=https%3A%2F%2Fwww.facebook.com%2Fgroups%2Fcloud.native.edu%2F



Linux Flavors
Arch,SUSE,Ubuntu,Read Hat

linux releases comes in packages 
which are files grouped into one single file
eg. rpm

LTS = Long term support

User Space  (GNU C library is the interfe to conn with Kernel)
Kernel Space

uname -srv  system release version


Two commonly used GUI

1) GNOME
2) KDE

/ 		Single root directory – file system base
/bin	Executable files such as Linux commands cat,cp,ls
/boot 	Files that the boot loaders access during start-up –including the Linux kernel
/dev 	Files for the different hardware/devices
/etc.  Initialization scripts and system config files
/home  User directories
/lib 	Library files which includes driver modules
/lost+found For lost files
/media 	Mounting removal media filesystems
/mnt 	Temporary directory for mounted filesystems
/opt 	For storing application packages
/proc 	Information on Linux processes
/root 	Root user home directory
/sbin 	Executable files for commands used by root user
/srv 	For services hosted by the system (e.g. FTP, web)
/tmp 	Temporary directory – deleted during system reboot
/usr 	Contains subdirectories for program files
/var 	Log files

cd. moves u to prev dir

run sudo apt-get update
+ run sudo apt-get update --fix-missing

du - h folderName | less  (scrolling interface incase of data is high for readibility)
yum and apt-get are installer packages

history | grep tail

grep -n "cm_apps_resources" smit.log  (line no. of serach string in a file)

dd
The dd command copies a file, converting the format of the data in the process, according to the operands specified.
dd if = /dev/sda of = /dev/sdb
“if” represents inputfile, and “of” represents output file. So the exact copy of /dev/sda will be available in /dev/sdb.

diff a.txt b.txt

More (Show a text file one page at a time – display can only go forward)
Less (Show a text file one page at a time – display can only go forward and backwards)

The cut command in UNIX is a command for cutting out the sections from each line of files and writing the result to standard output. 
In this, 1- indicate from 1st byte to end byte of a line
$ cut -b 1- state.txt

The grep filter searches a file for a particular pattern of characters, and displays all lines that contain that pattern.
Checking for the whole words in a file
grep -w "unix" geekfile.txt

Sed (Perform editing commands, then copy to a standard output)
SED is a powerful text stream editor. Can do insertion, deletion, search and replace(substitution

replaces the word “unix” with “linux” in the file.
$sed 's/unix/linux/' geekfile.txt

Split (Specify a size to break a file into)
‘split‘ command is used to split or break a file into the pieces in Linux and UNIX systems

sort fileName

Uniq (Keep unique lines in a file and delete duplicates)
uniq test.txt  (will display only uniqie words)

we need to install it 
apt install ncompress

compress -c test.txt > test1.Z


unzip: "list, test and extract compressed files in a ZIP archive

Gzip (Compress files with GNU Zip)
gzip test.txt will become test.txt.gz
The file ending is typically .gz

Gunzip (Use GNU Zip to decompress files)
The file ending is typically .gz
gunzip  test.txt.gz


The Linux ‘tar’ stands for tape archive, is used to create Archive and extract the Archive files.
tar cvf file.tar *.txt
This command creates a tar file called file.tar which is the Archive of all .txt files in current directory.

Extracting files from Archive
tar xvf file.tar

Read Write Execute
user group other

Read 	= 4
Write   = 2
Execute = 1
 

0 No permission
1 Execute
2 Write
3 Execute + Write
4 Read 
5 Read + Execute
6 Read + Write
7 Read + Write + Execute

USE SUDO

groupadd developers 
tail /etc/group

To add a new user into the group,
useradd -g developers new_user 


add an existing user to a group, use the usermod command
usermod -g developers existing_user 


Awk is a scripting language used for manipulating data and generating reports
GIMP (GNU Image Manipulation Program) and GNOME Ghostview (GGv

------------------------------------
vi Hello.txt
press i

press escape to quite insert mode
:wq!
------------------------------------









**********************************************************************************************************************
***********************************************************--Docker-***********************************************************

1) VM Ware Disadvantages
licencing cost
base OS use more resources as it has to deal with all virtual os


Hypervisor Layer
isolate OS and appl from the under lying hardware

Hypervisor = virtual machine monitor

container technology is a method

All containers on a single host/machine share a single OS

license fee`
portable and fast
cap-ex money capital
op-ex operational 

Types of Containers

Linux Containers

Windows Containers

*Running container uses the kernel of the host machine
container designed to run on a host with a windows kernel will not 
run on Linux host
windows container require a windows host

but it is possible to run Linux container on windows
using switch mode

docker is not a container
docker is a company

Enterprise Edition Paid
Community Edition  free

Batteries = features
can be use 

OCI 
Open container initiatives OCI

Image formats
specifications
runtime specs

---------------------------
docker installation

Read Offical Documentation
https://docs.docker.com/engine/install/ubuntu/
in case of error 
https://askubuntu.com/questions/1230189/how-to-install-docker-community-on-ubuntu-20-04-lts

---------------------------------------------
check ubunto verison
lsb_release -a

--------------------------------------------------------------------------
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

docker --version
docker info


docker version (client and sever)

----------------------------------------
Docker Engine
having multiple components which are swapable

1) Docker Client (used to communciate with docker daemon)

2) Docker Demon
docker API listen to manage images and container

3) Containerd
act as a bridge b/w deamon and runc
manage container lifecycle ie start/stop/push/destory
it is designed for single task

4) runc
runtime
how to make a container

5) shim
convert a container to daemonless
used whrn to upgrate the docker deamon
and running containers will work as 

common layers among diffen images are downloaded only once 
and get re-use in all images

images = stopped container

can create images from container
image container cut down os things(things which require)

Image registers
images stored in image resisgter
popluar is docker hub
image register have multiple repositorties
and each repository can contain mulltiple images

official registries

unofficial registries

push = upload
pull = download

Image Naming and Taging
docker image pull imageName:version

docker image pull usreName/imageName:version

no tag= latest tag


---------------------
docker pull alpine:latest OR
docker image pull alpine:latest

docker pull aamirpinger/helloworld:latest
-----------------------------------
docker image ls
OR
docker images

docker image rm ImageName or ImageId
docker image rm alpine:latest OR rm alpine

----------------------------------------------------------
-it is interactive mode (move to the shell/bash)

docker run -it userName/ImageName:latest
image download and run

docker run -it aamirpinger/helloworld sh 
# sig (we are in the file system of our continerized applicaiton)

No username will be created in the home of the conater

exit (back to the host terminal)

To list containers that are running
docker container ls

interactive mode
exit command will make the container to stopped

All container with every state
docker container ls -a 

Ctrl + p + q
will exit the container terminal but the container will be running

docker ps = docker container ls

docker ps -a 

to go to the already running container
docker exec -it imageName (in the list of running container)

docker exec -it 94ec7f391f32 sh

---------------------------------------
can't remove a running container , it should be first in stopped state
docker container stop containerName

--------------------------------------------------
docker container rm containerName
data is the file system of this container also removed
and can't be recovered after removing the container

--------------Container in Detach mode---------------------------------

No interaction , run in backgroud mode

docker container run -d imageName

docker container run -d aamirpinger/flag 
No sh is required in this commad

----------------Publish Port------------------------------


nginx is a webserver

* ImageName should be at the end of the command
						   outer:internal	
docker container run -d -p 5010:80  aamirpinger/helloworld:latest 
ainer
http://localhost:5010/

----------------Custom Container Name-----------------------------------------
docker container run -d --name=docker_app1 -p 5020:80 aamirpinger/flag:latest 

------------Containerizing an App-----------------------
image to container = containerization/dockerization
 
FROM  nginx (downlod nginx)
COPY . /usr/share/nginx/html (copy from current directory)

-----------------------------------
sudo apt-get install git
cd /home/piaic
git clone https://github.com/aamirpinger/docker-slide-code.git

cd html-js-app
docker build -t first-docker-app .
docker container run --name=first-docker-cont -d -p 8500:80 first-docker-app
http://localhost:8500

ake sure you are in node-js-app folder on your system

cd node-js-app
docker build -t node-app-image .
docker container run --name=first-node-cont -d -p 8551:8080 node-app-image
http://localhost:8551

-------------------------------------------------
Upload Image to docker hub to make it portable

docker push username/ImageName:tag 
docker push aamirpinger/node-app-image


--------------------------------------------------
docker tag (will create a copy of image with tag name)
id of the image is same 


docker image push 
two ways to push to docker hub

1) add user user name while creating the image
docker build -t aliimran1981/node-app-image .

2) using tag
docker tag first-docker-app aliimran1981/first-docker-app
docker login -u aliimran1981 -p pakistan12 docker.io
docker push aliimran1981/first-docker-app

---------------------------------------------
docker history imageName

docker history node-app-image

docker inspect node-app-image

--------------------------------
copy to clipboard

sudo apt install xsel
sudo apt install xclip

------------Bind Mount---------------------
dockers two options for container to store files

1) volumes
2) bind mounts

also use tmpfs on docker container for Linux
files becomes persists
or files bound to other running containers

bind mount
host system folder mount to container's file system
file now save to host system and not in the container
complete folder name to be provided


docker container run -it --name=bind_mount_example -v  /home/ubuntu/test_app_folder:/test_app_container aamirpinger/helloworld sh
change in that file and save it 
see the file in host 
docker exec -it bind_mount_example sh
docker container stop bind_mount_example
docker container rm bind_mount_example

docker container run -it --name=bind_mount_example1 -v  /home/ubuntu/test_app_folder:/test_app_container aamirpinger/helloworld sh

---------------------------------------------------------------------------------------------------------
Linux install Java/Jre 

sudo apt install default-jre
sudo apt install default-jdk
----------------------------------------------------------------------------------------------------------
Inslattion Visual Studio Code in Linux/Ubuntu
https://linuxize.com/post/how-to-install-visual-studio-code-on-ubuntu-18-04/

sudo apt update
sudo apt install software-properties-common apt-transport-https wget
https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
sudo apt update
sudo apt install code
sudo apt update
sudo apt upgrade

OR

sudo snap install --classic code
code
------------------------------------------------------------------------------------------

----------------Working --Rabbit MQ Docker--------------------
docker pull rabbitmq:3-management
docker run -d -p 15672:15672 -p 5672:5672 --name rabbit-test-for-medium rabbitmq:3-management
http://localhost:15672
guest/guest

docker ps -a

sudo docker start 94ec7f391f32
docker exec -it 94ec7f391f32 sh 

docker update --restart=always 94ec7f391f32

-----------------------------------------------------------------------------------------------------

install spring suite 
https://joseandresmacias.wordpress.com/2015/06/08/how-do-i-modify-my-hosts-file/

cd /opt
wget http://download.springsource.com/release/STS/3.6.3/dist/e4.4/spring-tool-suite-3.6.3.RELEASE-e4.4.1-linux-gtk-x86_64.tar.gz
sudo tar -xvf sudo tar -xvf spring-tool-suite-3.6.3.RELEASE-e4.4.1-linux-gtk-x86_64.tar.gz
chmod 777 -R sts-4.6.1.RELEASE
ln -s /opt/sts-4.6.1.RELEASE/STS /usr/local/bin/sts


------------------------------------------------------------------------------------------
You need a /etc/docker/daemon.json file that contains

{
	"dns": ["8.8.8.8", "8.8.4.4"]
}

Then just restart docker 

sudo systemctl restart docker
--------------------------------------------------------------------------
docker images -a
docker ps -a
--------------------------
To remove docker image
docker rmi image ImageName

---------------------------------
sudo systemctl restart network-manager

--------------------------------------MY SQL ----------------------------------------------------------------------

docker run --name mysql -p 306:3306 -e MYSQL_ROOT_PASSWORD=passsword mysql

docker exec -it mysql bash 
mysql -u root -ppasssword

create database EmployeeDB;
use EmployeeDB;
create table employees (id int not null, name text, primary key (id));
insert into employees values (1,'Ali');
insert into employees values (2,'Kamran');
insert into employees values (3,'Qasim');
commit;

-------------------------------------------REDIS -----------------------------------------------------------------
docker run --name redis -p 6379:6379 redis 
docker exec -it redis redis-cli 
set name "ali"
get name
------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
Jenkins in Docker (https://github.com/jenkinsci/docker)
docker run -d -v jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts

sudo docker rename charming_allen jenkins
sudo docker restart jenkins
docker exec -it jenkins bash
cat /var/jenkins_home/secrets/initialAdminPassword
---------------------------------------------------------------------------------------------------------------------


****************************************************** KUBERNETES **************************************************************************
Micro services
decoupled applications

Complexity
1) Difficult to configure
2) Management 

Kubernetes orchestration tool
automated deployment features
hardware failover scheduling
communication b/w applications

Google made it 
Initial name Borg then Omega
2014 open source


Kubernetes Master (Control Plane) gets the requests
control state of the cluster


Master Components 

1) etcd  distibuted data store 
having config of cluster , nodes address, applcaiton deplyed
key value pair

2)Scheduler
Resource requirement of the appp
resource management

3) Controller Manager
control worker nodes as well
apllicaiton managment 
replicas 
where to deploy
failover

3) API Server  
communicate with client 
ack as a communication bridge


Kubernetes Worker Nodes
machines that actual run the application

Worker Node Component 

1) kube-proxy
application bridge for communication b/w 
multiple applications
load balancing

2) Container Runtime
to run container
image to replicas

3) kubelet
make sure instance is made of using configurations
check health


Hitting a moving target
move application from server1 to other server1

one of the node failed
resource utilisation

If multiple container provides same service then 
you can group them at a single static IP address
which remain the same.

minikube
tool make worker and master node 
one node one master setup
tool to help us kubernetes to run in our system
for development purpose


Kubectl
kubernetes client

----------------------------------Install Minikube and kubectl---------------------------------------------------------------------------

https://computingforgeeks.com/how-to-install-minikube-on-ubuntu-debian-linux/


sudo apt-get update
sudo apt-get install apt-transport-https
sudo apt-get upgrade
sudo apt install virtualbox virtualbox-ext-pack

wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
chmod +x minikube-linux-amd64
sudo mv minikube-linux-amd64 /usr/local/bin/minikube

--------------------------------------------------------------------------------------------
VirtualBox runs virtual machines.
Minikube is a Kubernetes-specific package that runs a local development Kubernetes cluster on VirtualBox.
kubectl is the command line tool that lets you interact with your Minikube Kubernetes cluster.

Get my book on Kubernetes for software developers, used by engineers at Google, Microsoft, and IBM.



--------------------------------------------------------
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl

chmod +x ./kubectl

sudo mv ./kubectl /usr/local/bin/kubectl

kubectl version --client


---------------------------------
chage to ubuntu user 

minikube start
minikube status
kubectl cluster-info

-------------------------------------------------------
Nodes
kubectl get nodes or  kubectl get no
kubectl describe nodes NODENAME
kubectl describe nodes minikube 


Alias

alias kgn="kubectl get nodes"
kgn

PODS
Application must be in containerised
wrapper around container called pod (like virtual machine)
each pod having its own ip and hostname and its processes
Kubernetes ensure that A pod having (1 or more container) to be deployed in one worker node only

when two or more container needs to 
group together to achieve a task

rule
container is to perform a single task
low size
quick load

pod gives a feel that all processes running in it 
is executing in a single container

volume can be shared b/w containers  in a pod
that is why one node one pod

No same port no assign in a pod to difff container
but can be on a diff pod
as each pod has diff IP

Grouping Pod

sudo apt-get install cpu-checker
sudo kvm-ok 


minikube start --driver=virtualbox --force
minikube start --driver=docker --force

*************Minikube KataCoda*********************

Minikube is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a VM on your laptop for users looking to try out Kubernetes 

minikube version

Start the cluster
minikube start --wait=false

kubectl cluster-info

kubectl describe node minikube

kubectl get nodes
This command shows all nodes that can be used to host our applications

alias KGN="kubectl get nodes"
KGN

kubectl get nodes or kubectl get no

-------------------------------------------

pods is like a  virtal machine

one pod for one worker node
pod helps to group multiple containers together
its not a good approch to put all containers inside a single pod as kubernates ensure that it will deploy this pod on a single worker node, hsece resouce utilisation and load sharing is not good .

Grouping Pods
if
container should wo
rk together
user reach the containers together

POD Defination
YAML (user friendly)
JSON


Resources
Pod
Deployments
Jobs
Others
----------------------------------------------------------
Creating a POD

nano myfirstpod.yaml

myfirstpod.yaml                             
kind: Pod
apiVersion: v1
metadata:
  name: myfirstpod
spec: 
 containers:
  - name: container1
    image: aamirpinger/helloworld:latest
    ports:
    - containerPort: 80 

-----------------------------------------------------------
kubectl create -f myfirstpod.yaml

kubectl get pod or kubectl get po

NAME         READY   			STATUS    RESTARTS   AGE
myfirstpod   1(1=ready)/1(no. of container)     Running   0          9m29s


kubectl get pods myfirstpod -o yaml
kubectl get pods myfirstpod -o json

kubectl describe pods myfirstpod


Port Farwarding

kubectl port-forward myfirstpod 6100:80

http://localhost:6100

Ctrl + C will stop the port forwarding means
applicatkion still running but can't accessabile


creating a pod from 

kubectl run mysecondpod --image=aamirpinger/flag:latest --port 80 --restart=Never 

kubectl port-forward mysecondpod 6101:80
http://localhost:6101

using volume we can share files directories between containers within the pod

pod ip address and container port no is required.

we can create mutiple copies of our app/container as it gives static ip for each pod
also load balance

----------------Labels-----------

 helps to group resources
organise pods with help of label
key/value 

---------------------------------------------------
kubectl create -f myfirstpodwithlabels.yml

kind: Pod
apiVersion: v1
metadata:
  name: myfirstpodwithlabels
  labels:
    type: backend
    env: production
spec:
  containers:
  - image: aamirpinger/helloworld:latest
    name: container1
    ports:
    - containerPort: 80
    
    
kubectl run myfirstpodwithlabels1 --image=aamirpinger/flag:latest --port 80 --restart=Never --labels=type=frontend,env=development


kubectl get pods --show-labels

show lables in cloumns
kubectl get pods -L env,type,run

assgin lables at runtime

kubectl get pods --show-labels

add a label
kubectl label pods myfirstpod app=helloworld type=frontend

chnage a label
kubectl label pods myfirstpodwithlabels1 env=production --overwrite=true

remove a lable
kubectl label pods myfirstpod app-filter

pods with lable selector (select pods based on the criteria/ )

kubectl get pods -l type=frontend --show-labels
kubectl get pods -l type!=frontend --show-labels


kubectl get pods -l 'type in (frontend,backend)' --show-labels

kubectl get pods -l 'type notin (frontend,backend)' --show-labels

kubectl create -f myfirstpod_selector.yaml

kubectl get pods podwithnodeselector -o yaml
didn't match node selector on the worker node
thats why it is in pending state

Assing a label to a worker node
kubectl label node minikube typeofharddisk=ssd

Note: 
typeofharddisk=ssd should match in yaml file

----------------Annotations-----------

kubectl annotate pod myfirstpod app-desc="this is example of annotation in kubernetes"

kubectl get pods podwithannotation -o yaml

---------------Describe Pods Insight --------------------------------------------

kubectl describe pod myfirstpod

--------Overlapping Labels using Namespace ------------


 is a kind of virtulbox which islolate self contain resources with other namespace. 
Kubernetes groups objects into namespace


kubectl create namespace production 

kubectl create -f myfirstpodwithNS.yaml
kubectl get pods --namespace=production

kubectl run podwithnamespace1 --image=aamirpinger/helloworld --port=80 --restart=Never --namespace=development

--------------------------------------------------

kubectl create deployment first-deployment --image=katacoda/docker-http-server

kubectl get pods

One possible solution is NodePort, that provides a dynamic port to a container.
kubectl expose deployment first-deployment --port=80 --type=NodePort

minikube addons enable dashboard

Kubeadm solves the problem of handling TLS encryption configuration, deploying the core Kubernetes components and ensuring that additional nodes can easily join the cluster. The resulting cluster is s

The master is responsible for running the control plane components, etcd and the API serve

-----------------Git Related-------------------------------------------------------






